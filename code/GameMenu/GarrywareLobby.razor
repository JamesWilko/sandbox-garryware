@using System
@using System.Collections.Generic
@using Sandbox;
@using Sandbox.Menu
@using Sandbox.Modals
@using Sandbox.UI;

@namespace Garryware.UI.GameMenu
@attribute [StyleSheet]
@inherits Panel

<root style="flex-direction: column;">

    <div style="flex-direction: row; height: 100%;">
        <div class="left-panel">
            <div class="menu-section">
                <div class="header">
                    <svg class="icon" Src="ui/settings.svg" Color=@Color.White.Hex></svg>
                    Game Settings
                </div>
                
                @if (Lobby == null)
                {
                    <div class="content background expand">
                        No lobby found!
                        <span style="margin-bottom: auto"></span>
                    </div>
                }
                else if(Lobby.Owner.IsMe)
                {
                    <div class="content background expand">
                        <div class="option">
                            Lobby Name
                            <TextEntry @ref="LobbyNameTextEntry" Text="@Lobby.Title" @onsubmit="@OnSubmitNewLobbyName"/>
                        </div>
                        <div class="option">
                            Max Players
                            <SliderControl @ref="MaxPlayersSlider" Value:bind="@MaxPlayers" ShowRange="@true" Step="@(1)" Min="@(1)" Max="@(32)"></SliderControl>
                        </div>
                        <div class="option">
                            Public Lobby?
                            <ButtonGroup Options=@lobbyPublicOptions Value:bind=@Lobby.Public></ButtonGroup>
                        </div>
                        <div class="option">
                            Rounds
                            <div class="vertical">
                                <SliderControl @ref="RoundsSlider" Value:bind="@RoundCount" ShowRange="@true" Step="@(5)" Min="@(5)" Max="@(100)"></SliderControl>
                                <label @ref="GameLengthLabel"></label>
                            </div>
                        </div>
                        <div class="option">
                            Play Tutorial?
                            <ButtonGroup Options=@playTutorialOptions Value:bind=@PlayTutorial></ButtonGroup>
                        </div>
                    </div>
                    <div class="start-button" @onclick="@StartGame">
                        <svg class="icon" Src="ui/play-circle.svg" Color=@Color.White.Hex></svg>
                        Start Game
                    </div>
                }
                else
                {
                    <div class="content background expand">
                        <div class="option">
                            Lobby
                            <label>@Lobby.Title</label>
                        </div>
                        <div class="option">
                            Public Lobby?
                            <label>@(Lobby.Public ? "Yes" : "No")</label>
                        </div>
                        <div class="option">
                            Rounds
                            <div class="vertical">
                                <label @ref="GameLengthLabel">100 rounds, about 60 minutes</label>
                            </div>
                        </div>
                        <div class="option">
                            Play Tutorial?
                            <label>@(PlayTutorialFromData ? "Yes" : "No")</label>
                        </div>
                    </div>
                    <div class="start-button">
                        <svg class="icon" Src="ui/play-circle.svg" Color=@Color.White.Hex></svg>
                        Waiting for host to start...
                    </div>
                }
            </div>
        </div>
    
        <div class="right-panel">

            <span style="margin-bottom: auto"></span>
            
            <div class="menu-section">
                <div class="header">
                    <svg class="icon" Src="ui/chat-round-dots.svg" Color=@Color.White.Hex></svg>
                    Chat
                </div>
                <div class="content background">
                    <LobbyChat></LobbyChat>
                </div>
            </div>
            
            <div class="menu-section">
                <div class="header">
                    <svg class="icon" Src="ui/user-id.svg" Color=@Color.White.Hex></svg>
                    Players
                    <Label class="player-count">@Lobby?.MemberCount/@Lobby?.MaxMembers</Label>
                </div>
                <div class="content background">
                    <LobbyUsersList></LobbyUsersList>
                    <span style="height: 10px"></span>
                    <div class="button small" @onclick="@InviteFriends">Invite Friends</div>
                </div>
            </div>
        </div>
    </div>
    
    <span style="height: 20px"></span>
    <div class="controls">
        <a class="button" @onclick="@LeaveLobby">Leave Lobby</a>
    </div>
    
</root>

@code
{
    private ILobby Lobby => Game.Menu.Lobby;
    private bool IsLobbyOwner { get; set; }
    
    private int MaxPlayers { get; set; } = 16;
    private int RoundCount { get; set; } = 40;
    private bool PlayTutorial { get; set; } = true;

    private TextEntry LobbyNameTextEntry { get; set; }
    private SliderControl MaxPlayersSlider { get; set; }
    private SliderControl RoundsSlider { get; set; }
    private Label GameLengthLabel { get; set; }

    private bool PlayTutorialFromData
    {
        get
        {
            if (Lobby.Data.TryGetKey("play-tutorial", out var tutorialString))
            {
                return tutorialString == "1";
            }
            return true;
        }
    }
    
    private List<Option> lobbyPublicOptions = new List<Option>()
    {
        new Option("Public", true),
        new Option("Private", false),
    };
    
    private List<Option> playTutorialOptions = new List<Option>()
    {
        new Option("Yes", true),
        new Option("No", false),
    };

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (Lobby == null)
            return;
        
        IsLobbyOwner = Lobby.Owner.IsMe;
        
        if (!IsLobbyOwner)
        {
            if (Lobby.Data.TryGetKey("rounds", out var roundsStr))
            {
                if (int.TryParse(roundsStr, out int rounds))
                {
                    GameLengthLabel.Text = RoundsToMinutesString(rounds);
                }
            }
            else
            {
                Log.Warning("Could not retrieve number of rounds from lobby data");
            }
        }

        if (firstTime)
        {
            UpdateGameLengthLabel();

            if (IsLobbyOwner)
            {
                MaxPlayersSlider.OnValueChanged += OnMaxPlayersChanged;
                RoundsSlider.OnValueChanged += OnRoundsChanged;
            }
        }
    }

    public override void OnHotloaded()
    {
        base.OnHotloaded();
        
        UpdateGameLengthLabel();
    }

    private void OnMaxPlayersChanged(float _)
    {
        Lobby.MaxMembers = MaxPlayers;
    }

    private void OnRoundsChanged(float _)
    {
        UpdateGameLengthLabel();
        Lobby.SetData("rounds", RoundCount.ToString());
    }

    private void OnSubmitNewLobbyName(PanelEvent e)
    {
        Lobby.Title = LobbyNameTextEntry.Text;
    }
    
    private void LeaveLobby()
    {
        Lobby?.Leave();
    }

    private void InviteFriends()
    {
        Game.Overlay.ShowFriendsList();
    }
    
    private async void StartGame()
    {
        Lobby.SetData("convar.gw_max_rounds", RoundCount.ToString());
        Lobby.SetData("convar.gw_skip_tutorial", PlayTutorial ? "0" : "1");
        Lobby.Map = "dhi.garryware_lifelime";

        LoadingOverlay.Show();
        await Task.Delay(200); // required for lobby settings to take effect for some reason
        await Lobby.LaunchGameAsync();
        LoadingOverlay.Hide();
    }

    private void UpdateGameLengthLabel()
    {
        if (GameLengthLabel != null)
        {
            GameLengthLabel.Text = RoundsToMinutesString(RoundCount);
        }
    }

    private string RoundsToMinutesString(int rounds)
    {
        var approxMinutes = MathF.Ceiling(rounds / 4f);
        return $"{rounds:N0} rounds, about {approxMinutes:N0} minutes";
    }
    
}
