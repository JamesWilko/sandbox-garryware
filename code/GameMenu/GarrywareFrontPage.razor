@using System
@using System.Linq
@using System.Threading.Tasks
@using Sandbox;
@using Sandbox.MenuSystem;
@using Sandbox.UI;
@namespace Garryware.UI.GameMenu
@attribute [StyleSheet]

<root style="flex-direction: column;">

    <div class="game-title">
    </div>
    
    <span style="margin-bottom: auto"></span>
    
    <div class="control-cards">
        
        @if (Game.InGame)
        {
            <MenuCard onclick="@ReturnToLobby">
                <Icon><svg class="icon" Src="ui/play-circle.svg" Color=@Color.White.Hex></svg></Icon>
                <Title>Keep Playing</Title>
            </MenuCard>
            <MenuCard onclick="@LeaveGame">
                <Icon><svg class="icon" Src="ui/exit.svg" Color=@Color.White.Hex></svg></Icon>
                <Title>Leave Game</Title>
            </MenuCard>
        }
        else
        {
            <MenuCard onclick="@ShowNewGameOptions">
                <Icon><svg class="icon" Src="ui/play-circle.svg" Color=@Color.White.Hex></svg></Icon>
                <Title>New Game</Title>
            </MenuCard>
            <MenuCard onclick="@OpenServerList">
                <Icon><svg class="icon" Src="ui/server.svg" Color=@Color.White.Hex></svg></Icon>
                <Title>Find Game</Title>
            </MenuCard>
            <MenuCard onclick="@OpenSettings">
                <Icon><svg class="icon" Src="ui/settings.svg" Color=@Color.White.Hex></svg></Icon>
                <Title>Settings</Title>
            </MenuCard>
        }
    </div>
            
    <span style="height: 20px"></span>
    <div class="controls">
        <a class="button" @onclick="@Game.Menu.Close">Quit</a>
    </div>
    
    @* <div class="links"> *@
    @*     <a class="button" onclick=@CopyGithubLink> *@
    @*         <div class="github"></div> *@
    @*     </a> *@
    @*     <div class="copy-popup" @ref=ClipboardCopyLabel>Copied to clipboard!</div> *@
    @* </div> *@

</root>

@code
{
    private Label ClipboardCopyLabel { get; set; }

    private void ShowNewGameOptions()
    {
        this.Navigate("/new");
    }
    
    private void ReturnToLobby()
    {
        this.Navigate("/active");
    }
    
    private void CreateNewGame()
    {
        var options = new Sandbox.Modals.GameCreateModalOptions();
        options.Cookie = $"{Game.Menu.Package.FullIdent}.serverconfig";

        options.ModalTitle = "Create Game";
        options.MapFilter = "type:map sort:trending";
        options.Default.Map = "dhi.garryware_lifelime";
        options.Default.GameTitle = $"{Game.Menu.Package.Title} Server";
        options.MapSelection = false;

        options.OnStartGame = (setup) =>
        {
            Game.Menu.StartServerAsync(setup.MaxPlayers, setup.GameTitle, "dhi.garryware_lifelime");
        };

        Game.Overlay.ShowCreateGame(options);
    }
    
    private void OpenServerList()
    {
        var options = new Sandbox.Modals.ServerListModalOptions();
        options.TargetGame = Game.Menu.Package.FullIdent;
        options.OnSelected = (server) =>
        {
            Game.Menu.ConnectToServer(server.SteamId);
        };

        Game.Overlay.ShowServerList(options);
    }

    private void OpenSettings()
    {
        this.Navigate("/settings");
    }

    private void LeaveGame()
    {
        Game.Menu.LeaveServer("Leaving");
    }

    private void CopyGithubLink()
    {
        Clipboard.SetText("https://github.com/JamesWilko/sandbox-garryware");
        // @todo: tell people it's copied to the clipboard
    }
    
}
