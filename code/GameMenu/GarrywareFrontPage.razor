@using System
@using System.Threading.Tasks
@using Sandbox;
@using Sandbox.UI;

@namespace Garryware.UI.GameMenu

@attribute [StyleSheet]
@inherits Panel;

<root style="flex-direction: column;">

    <div style="flex-direction: row; height: 100%;">
        <div class="left-panel">
            
            <div class="game-title" onclick="@OpenGameInfo">
            </div>

            <span style="margin-bottom: auto"></span>

            <div class="control-cards">
                @if (Game.InGame)
                {
                    <MenuCard onclick="@ReturnToLobby">
                        <Icon><svg class="icon" Src="ui/play-circle.svg" Color=@Color.White.Hex></svg></Icon>
                        <Title>Keep Playing</Title>
                    </MenuCard>
                    <MenuCard onclick="@LeaveGame">
                        <Icon><svg class="icon" Src="ui/exit.svg" Color=@Color.White.Hex></svg></Icon>
                        <Title>Leave Game</Title>
                    </MenuCard>
                }
                else
                {
                    <MenuCard onclick="@CreateLobby">
                        <Icon><svg class="icon" Src="ui/play-circle.svg" Color=@Color.White.Hex></svg></Icon>
                        <Title>New Game</Title>
                    </MenuCard>
                    <MenuCard onclick="@OpenServerList">
                        <Icon><svg class="icon" Src="ui/server.svg" Color=@Color.White.Hex></svg></Icon>
                        <Title>Find Game</Title>
                    </MenuCard>
                    <MenuCard onclick="@OpenSettings">
                        <Icon><svg class="icon" Src="ui/settings.svg" Color=@Color.White.Hex></svg></Icon>
                        <Title>Settings</Title>
                    </MenuCard>
                }
            </div>
            
        </div>
        
        <div class="right-panel">
            
            <span style="margin-bottom: 50px"></span>
            <div class="info-box">
                <svg class="icon" Src="ui/info-circle.svg" Color=@Color.White.Hex></svg>
                Just like s&box, GarryWare is a work in progress! Occasionally you might run into an issue, please report them to us on the s&box discord or our GitHub.
            </div>
            
            <span style="margin-bottom: auto"></span>
            
            <div class="menu-section">
                <div class="header">
                    <svg class="icon" Src="ui/user-heart.svg" Color=@Color.White.Hex></svg>
                    Lobbies
                    <div class="refresh" onclick="@RefreshLobbiesList">
                        <svg @ref="RefreshLobbiesIcon" class="icon" Src="ui/refresh-circle.svg" Color=@Color.White.Hex></svg>
                    </div>
                </div>
                <div class="content background">
                    <div @ref="LobbiesListPanel" class="entries">
                    </div>
                </div>
            </div>
            
        </div>
    </div>
    
    <span style="height: 20px"></span>
    <div class="controls">
        <a class="button" @onclick="@Game.Menu.Close">Quit</a>
    </div>
    
</root>

@code
{
    private bool isCreatingLobby;

    private Panel LobbiesListPanel { get; set; }
    private SvgPanel RefreshLobbiesIcon { get; set; }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            RefreshLobbiesList();
        }
    }

    public override void OnHotloaded()
    {
        base.OnHotloaded();

        RefreshLobbiesList();
    }
    
    private async void CreateLobby()
    {
        if(isCreatingLobby)
            return;

        isCreatingLobby = true;
        LoadingOverlay.Show();

        var lobby = await Game.Menu.CreateLobbyAsync(16, "garryware", true);
        lobby.Title = $"{Game.UserName}'s Lobby";
        lobby.SetData("rounds", "40"); // lazy way to set defaults but idc
        lobby.SetData("play-tutorial", "1");

        isCreatingLobby = false;
        LoadingOverlay.Hide();
        
        this.Navigate("/lobby");
    }
    
    private void ReturnToLobby()
    {
        this.Navigate("/active");
    }
    
    private void OpenServerList()
    {
        var options = new Sandbox.Modals.ServerListModalOptions();
        options.TargetGame = Game.Menu.Package.FullIdent;
        options.OnSelected = (server) =>
        {
            Game.Menu.ConnectToServer(server.SteamId);
        };

        Game.Overlay.ShowServerList(options);
    }

    private void OpenSettings()
    {
        this.Navigate("/settings");
    }
    
    private void OpenGameInfo()
    {
        Game.Overlay.ShowPackageModal(Game.Menu.Package.FullIdent);
    }
    
    private void OpenOrganization()
    {
        Game.Overlay.ShowOrganizationModal(Game.Menu.Package.Org);
    }

    private void LeaveGame()
    {
        Game.Menu.LeaveServer("Leaving");
    }
    
    private async void RefreshLobbiesList()
    {
        if (LobbiesListPanel == null)
            return;

        RefreshLobbiesIcon.Style.AnimationPlayState = "running";
        
        Log.Info($"Querying lobbies");
        var lobbiesTask = Game.Menu.QueryLobbiesAsync();
        await lobbiesTask;
        
        RefreshLobbiesIcon.Style.AnimationPlayState = "paused";
        LobbiesListPanel.DeleteChildren(true);
        
        Log.Info($"Retrieved {lobbiesTask.Result.Length} lobbies");
        if (lobbiesTask.Result.Length == 0)
        {
            LobbiesListPanel.AddChild(new Label()
            {
                Text = "There's no-one here right now, why not start the party?"
            });
        }
        else
        {
            foreach (var lobby in lobbiesTask.Result)
            {
                LobbiesListPanel.AddChild(new JoinLobbyButton()
                {
                    Lobby = lobby,
                });
            }
        }
    }
    
}
